// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6

package types

type Conversation struct {
	ConversationID int64  `json:"conversationID"`
	Conversation   string `json:"conversation"`
	AvatarUrl      string `json:"avatarUrl"`
	LastMessage    string `json:"lastMessage"`
	LastTime       int64  `json:"lastTime"`
	UnreadCount    int64  `json:"unreadCount"`
}

type CreateConversationReq struct {
	UserID int64 `json:"userID"`
}

type CreateConversationRes struct {
	Result       Result       `json:"result"`
	Conversation Conversation `json:"conversation"`
}

type GetFindMessageReq struct {
	ConversationID int64  `path:"conversationID"`
	Limit          int64  `json:"limit"`
	Offset         int64  `json:"offset"`
	Keyword        string `json:"keyword"`
}

type GetFindMessageRes struct {
	Result   Result    `json:"result"`
	Messages []Message `json:"messages"`
	Total    int64     `json:"total"`
}

type GetListConversationReq struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetListConversationRes struct {
	Result        Result         `json:"result"`
	Conversations []Conversation `json:"conversations"`
	Total         int64          `json:"total"`
}

type GetListMessageReq struct {
	ConversationID int64 `path:"conversationID"`
	Limit          int64 `json:"limit"`
	Offset         int64 `json:"offset"`
}

type GetListMessageRes struct {
	Result   Result    `json:"result"`
	Messages []Message `json:"messages"`
	Total    int64     `json:"total"`
}

type Message struct {
	MessageID      int64  `json:"messageID"`
	ConversationID int64  `json:"conversationID"`
	SenderID       int64  `json:"senderID"`
	Message        string `json:"message"`
	CreatedAt      int64  `json:"createdAt"`
}

type Result struct {
	Code    int    `json:"code"`    //    Result code: 0 is success. Otherwise, getting an error
	Message string `json:"message"` // Result message: detail response code
}

type SendMessageReq struct {
	ConversationID int64  `path:"conversationID"`
	Message        string `json:"message"`
}

type SendMessageRes struct {
	Result  Result  `json:"result"`
	Message Message `json:"message"`
}

type User struct {
	UserID    int64  `json:"userID"`
	FullName  string `json:"fullName"`
	AvatarUrl string `json:"avatarUrl"`
	CreatedAt int64  `json:"createdAt"`
}
