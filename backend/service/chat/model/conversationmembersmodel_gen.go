// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	conversationMembersFieldNames          = builder.RawFieldNames(&ConversationMembers{})
	conversationMembersRows                = strings.Join(conversationMembersFieldNames, ",")
	conversationMembersRowsExpectAutoSet   = strings.Join(stringx.Remove(conversationMembersFieldNames), ",")
	conversationMembersRowsWithPlaceHolder = strings.Join(stringx.Remove(conversationMembersFieldNames, "`id`"), "=?,") + "=?"
)

type (
	conversationMembersModel interface {
		Insert(ctx context.Context, data *ConversationMembers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ConversationMembers, error)
		Update(ctx context.Context, data *ConversationMembers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultConversationMembersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ConversationMembers struct {
		Id             int64         `db:"id"`
		ConversationId int64         `db:"conversation_id"`
		UserId         int64         `db:"user_id"`
		JoinedAt       sql.NullInt64 `db:"joined_at"`
	}
)

func newConversationMembersModel(conn sqlx.SqlConn) *defaultConversationMembersModel {
	return &defaultConversationMembersModel{
		conn:  conn,
		table: "`conversation_members`",
	}
}

func (m *defaultConversationMembersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConversationMembersModel) FindOne(ctx context.Context, id int64) (*ConversationMembers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", conversationMembersRows, m.table)
	var resp ConversationMembers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConversationMembersModel) Insert(ctx context.Context, data *ConversationMembers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, conversationMembersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ConversationId, data.UserId, data.JoinedAt)
	return ret, err
}

func (m *defaultConversationMembersModel) Update(ctx context.Context, data *ConversationMembers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, conversationMembersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConversationId, data.UserId, data.JoinedAt, data.Id)
	return err
}

func (m *defaultConversationMembersModel) tableName() string {
	return m.table
}
